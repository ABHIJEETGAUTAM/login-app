{"version":3,"sources":["components/SignIn.js","components/SignUp.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","sessionStorage","getItem","setState","route","onPhoneNumberChange","event","signInPhoneNumber","target","value","onPasswordChange","signInPassword","onSignIn","fetch","method","headers","Content-Type","body","JSON","stringify","phoneNumber","state","password","then","response","json","data","alert","setItem","token","onSignUpClick","react_default","a","createElement","reactstrap_es","onChange","type","placeholder","onClick","color","size","block","className","href","Redirect","to","Component","SignUp","phone_no","Password","onNameChange","Name","onAadharChange","Aadhar","onSignInClick","onSignUp","name","aadhar","Home","updateUserInfo","userInfo","id","onLogout","removeItem","App","loadUser","user","_this2","BrowserRouter","Route","exact","path","render","components_SignIn","components_Home","components_SignUp","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a52114af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nclass SignIn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signInPhoneNumber: '',\n      signInPassword: '',\n      route: 'signin',\n    }\n  }\n\n  componentDidMount = () => {\n    const token = sessionStorage.getItem('token');\n    if(token !== null){\n      this.setState({route: 'home'});\n    }\n  }\n\n  onPhoneNumberChange = (event) => {\n    this.setState({signInPhoneNumber: event.target.value})\n  }\n\n  onPasswordChange = (event) => {\n    this.setState({signInPassword: event.target.value})\n  }\n\n  onSignIn = () => {\n    fetch('https://infinite-hamlet-28839.herokuapp.com/signin', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        phoneNumber: this.state.signInPhoneNumber,\n        password: this.state.signInPassword\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        if(data === false){\n          alert('Invalid Phone Number or Passowrd');\n        }\n        else{\n          sessionStorage.setItem('token', data.token);\n          this.setState({route: \"home\"});\n        }\n      })\n  }\n\n  onSignUpClick = () => {\n    this.setState({route: \"signup\"})\n  }\n  \n  render() {\n    if(this.state.route === 'signin'){\n      return (\n        <div>\n          <Form>\n            <FormGroup>\n              <h1>Sign In</h1>\n            </FormGroup>\n            <FormGroup>\n              <Label>Phone Number</Label>\n              <Input onChange={this.onPhoneNumberChange} type=\"text\" placeholder=\"Enter Phone Number\" />\n            </FormGroup>\n            <FormGroup>\n              <Label>Password</Label>\n              <Input onChange={this.onPasswordChange} type=\"password\" placeholder=\"Enter Password\" />\n            </FormGroup>\n            <FormGroup>\n              <Button onClick={this.onSignIn} color=\"primary\" size=\"lg\" block>Sign In</Button>\n            </FormGroup>\n            <FormGroup>\n              <a onClick={this.onSignUpClick} className=\"f6 link dim black db\" href=\"#0\">\n                Sign up\n              </a>              \n            </FormGroup>\n          </Form>\n        </div>\n      );\n    }\n    else if (this.state.route === 'signup'){\n      return(\n        <Redirect to=\"/signup\"/>\n      );\n    }\n    else if (this.state.route === 'home'){\n      return(\n        <Redirect to=\"/home\"/>\n      );\n    }\n  }\n}\n\nexport default SignIn;\n","import React, { Component } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phone_no: '',\n      Password: '',\n      Name: '',\n      Aadhar: '',\n      route: 'signup'\n    }\n  }\n\n  componentDidMount = () => {\n    const token = sessionStorage.getItem('token');\n    if(token !== null){\n      this.setState({route: 'home'});\n    }\n  }\n\n  onPhoneNumberChange = (event) => {\n    this.setState({phone_no: event.target.value})\n  }\n\n  onPasswordChange = (event) => {\n    this.setState({Password: event.target.value})\n  }\n\n  onNameChange = (event) => {\n      this.setState({Name: event.target.value})\n  }\n\n  onAadharChange = (event) => {\n      this.setState({Aadhar: event.target.value})\n  }\n\n  onSignInClick = () => {\n    this.setState({route: \"signin\"})\n  }\n\n  onSignUp = () => {\n    fetch('https://infinite-hamlet-28839.herokuapp.com/signup', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        name: this.state.Name,\n        aadhar: this.state.Aadhar,\n        phoneNumber: this.state.phone_no,\n        password: this.state.Password\n      })\n    })\n    .then(response => response.json())\n    .then(data => {\n      if(data === false){\n        alert('Error Signing up. Check credentials');\n      }\n      else{\n        sessionStorage.setItem('token', data.token);\n        this.setState({route: \"home\"});\n      }\n    })\n  }\n  \n  render() {\n    if(this.state.route === 'signup'){\n      return (\n        <div>\n          <Form>\n            <FormGroup>\n              <h1>Sign Up</h1>\n            </FormGroup>\n            <FormGroup>\n              <Label>Name</Label>\n              <Input onChange={this.onNameChange} type=\"text\" placeholder=\"Enter Name\" />\n            </FormGroup>\n            <FormGroup>\n              <Label>Phone Number</Label>\n              <Input onChange={this.onPhoneNumberChange} type=\"text\" placeholder=\"Enter Phone Number\" />\n            </FormGroup>\n            <FormGroup>\n              <Label>Aadhar Number</Label>\n              <Input onChange={this.onAadharChange} type=\"text\" placeholder=\"Enter Aadhar Number\" />\n            </FormGroup>\n            <FormGroup>\n              <Label>Password</Label>\n              <Input onChange={this.onPasswordChange} type=\"password\" placeholder=\"Enter Password  \" />\n            </FormGroup>\n            <FormGroup>\n              <Button onClick={this.onSignUp} color=\"primary\" size=\"lg\" block>Sign Up</Button>\n            </FormGroup>\n            <FormGroup>\n              <a onClick={this.onSignInClick} className=\"f6 link dim black db\" href=\"#0\">\n                Sign in\n              </a>\n            </FormGroup>\n          </Form>\n        </div>\n      );\n    }\n    else if (this.state.route === 'home'){\n      return(\n        <Redirect to=\"/home\"/>\n      );\n    }\n    else if(this.state.route === 'signin'){\n      return(\n        <Redirect to=\"/\"/>\n      );\n    }\n  }\n}\n\nexport default SignUp;\n","import React, { Component } from 'react';\nimport {Redirect} from 'react-router-dom';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: 'home',\n      userInfo: {\n        id: '',\n        name: '',\n        phoneNumber: '',\n        aadhar: '',\n        password: ''\n      }\n    }\n  };\n\n  updateUserInfo = (data) => {\n    this.setState({userInfo: { \n      id: data.id,\n      name: data.name,\n      phoneNumber: data.phone_no,\n      aadhar: data.aadhar,\n      password: data.password \n  }})\n  }\n\n  onLogout = () => {\n    this.setState({route: 'signin'});\n    sessionStorage.removeItem('token');\n  }\n\n  componentDidMount = () => {\n    fetch('https://infinite-hamlet-28839.herokuapp.com/home', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        token: sessionStorage.getItem('token'),\n      })\n    })\n      .then(response => response.json())\n      .then(data => {\n        if(data === false){\n          alert('Error Retreiving data');\n        }\n        else{\n          this.updateUserInfo(data);\n        }\n      })\n  }\n\n  render() {\n      if(this.state.route === 'home'){\n        return(\n          <div className=\"ma4 flex flex-column tc\">\n              <div className=\"ba flex flex-column db\">\n                <p className=\"f1 ma2 b\">User Information</p>\n                <p className=\"f3 ma2 b\">ID</p>\n                <p className=\"f3 ma2\">{this.state.userInfo.id}</p>\n                <p className=\"f3 ma2 b\">Name</p>\n                <p className=\"f3 ma2\">{this.state.userInfo.name}</p>\n                <p className=\"f3 ma2 b\">Phone Number</p>\n                <p className=\"f3 ma2\">{this.state.userInfo.phoneNumber}</p>\n                <p className=\"f3 ma2 b\">Aadhar Card Number</p>\n                <p className=\"f3 ma2\">{this.state.userInfo.aadhar}</p>\n                <p className=\"f3 ma2 b\">Password</p>\n                <p className=\"f3 ma2\">{this.state.userInfo.password}</p>\n              </div>\n              <div className=\"ma4\">\n                <a \n                  onClick={this.onLogout}\n                  className=\"f6 link dim ba ph3 pv2 mb2 dib black grow\" \n                  href=\"#0\">\n                  Logout\n                </a>\n              </div>\n          </div>\n  \n        );\n      }\n      else if(this.state.route === 'signin'){\n        return(\n          <Redirect to=\"/\"/>\n        );\n      }\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport SignIn from './components/SignIn';\nimport SignUp from './components/SignUp';\nimport {BrowserRouter, Route} from 'react-router-dom';  \nimport Home from './components/Home';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        user: {\n            id: '',\n            name: '',\n            phoneNumber: '',\n            aadhar: '',\n            password: ''\n          }\n    }\n  };\n\n  loadUser = (data) => {\n    this.setState({user: { \n        id: data.id,\n        name: data.name,\n        phoneNumber: data.phone_no,\n        aadhar: data.aadhar,\n        password: data.password \n    }})\n  }\n\n  render() {\n      return(\n        <BrowserRouter>\n            <div>\n            <Route \n                exact path=\"/\"\n                render={() => (\n                    <SignIn loadUser={this.loadUser} />\n                )} \n            />\n            <Route \n                exact path=\"/home\"\n                render={() => (\n                    <Home phoneNumber={this.state.user.phoneNumber}  />\n                )} \n            />\n            <Route \n                exact path=\"/signup\"\n                render={() => (\n                    <SignUp loadUser={this.loadUser} />\n                )} \n            />\n            </div>\n        </BrowserRouter>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css'\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}